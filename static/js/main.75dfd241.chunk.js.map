{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","products","fetch","method","res","json","this","setState","map","item","index","key","title","price","src","avatarUrl","Table","bordered","size","style","backgroundColor","renderTableData","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAkEeA,G,wDA7Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAU,IAHA,E,6VASIC,M,4JAAW,CACvBC,OAAQ,Q,cADRC,E,gBAIaA,EAAIC,O,OAAjBA,E,OACJC,KAAKC,SAAS,CACVN,SAAUI,EAAKJ,W,8IAKnB,OAAOK,KAAKN,MAAMC,SAASO,KAAI,SAACC,EAAMC,GACpC,OACE,wBAAIC,IAAKD,GACP,4BACGA,EAAM,GAET,4BACGD,EAAKG,OAER,gCACIH,EAAKI,OAET,4BACE,yBAAKC,IAAKL,EAAKM,mB,+BAQvB,OACG,6BACE,kBAACC,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,MAClB,2BAAOC,MAAO,CAACC,gBAAiB,UAC5B,4BACI,mCACA,sCACA,uCACA,yCAGR,+BACKd,KAAKe,yB,GAtDJC,cCQEC,QACW,gDAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75dfd241.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      products: []\n    }\n  }\n\n  async componentDidMount() {\n    let url = `https://cors-anywhere.herokuapp.com/https://www.vroomdelivery.com/api/v1/products/getProductsWithSecondaryCategories?company_id=88&secondary_category=204`\n    var res = await fetch(url, {\n        method: 'GET'\n    });\n\n    let json = await res.json()\n    this.setState({\n        products: json.products,\n    })\n  }\n\n  renderTableData() {\n    return this.state.products.map((item, index) => {\n      return (\n        <tr key={index}>\n          <td>\n            {index+1}\n          </td>\n          <td>\n            {item.title}\n          </td>\n          <td>\n            ${item.price}\n          </td>\n          <td>\n            <img src={item.avatarUrl}></img>\n          </td>\n        </tr>\n      )\n    })\n  }\n\n  render() {\n    return (\n       <div> \n         <Table bordered size=\"lg\">\n            <thead style={{backgroundColor: 'white'}}>\n                <tr>\n                    <th> # </th>\n                    <th> Item </th>\n                    <th> Price </th>\n                    <th> Photo </th>\n                </tr>\n            </thead>\n            <tbody>\n                {this.renderTableData()}\n            </tbody>\n        </Table>\n      </div>\n    ); \n  }\n}\n\nexport default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'http://secondment.eastus.cloudapp.azure.com' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}